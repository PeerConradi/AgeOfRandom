@page "/"
@inject Data.MainService mainService;

<div class="row">
    <div class="col-12">
        <div class="form-group">
            <label>Nation</label>
            @if (!loadingDeck)
            {
                <select @bind="@selectedCityFile" class="form-control">
                    @foreach (var fileName in Data.MainService.Civs)
                    {
                        <option value="@fileName.Key">@fileName.Value</option>
                    }
                </select>
            }

        </div>
    </div>
</div>

<div class="row">

    <div class="col-12">
        <table class="table">
            <tbody>
                <tr>
                    <td>I</td>
                    @if (PickedCards != null)
                    {
                        @foreach (var card in PickedCards.Where(n => n.Age == 0).OrderBy(n => n.DisplayUnitCount))
                        {
                            <td>
                                <img src="/img/@card.ImageName" style="width: 64px; height: 64px" />
                                <p>@card.Name</p>
                            </td>

                        }
                    }

                </tr>

                <tr>
                    <td>II</td>
                    @if (PickedCards != null)
                    {
                        @foreach (var card in PickedCards.Where(n => n.Age == 1).OrderBy(n => n.DisplayUnitCount))
                        {
                            <td>
                                <img src="/img/@card.ImageName" style="width: 64px; height: 64px" />
                                <p>@card.Name</p>
                            </td>

                        }
                    }
                </tr>

                <tr>
                    <td>III</td>
                    @if (PickedCards != null)
                    {
                        @foreach (var card in PickedCards.Where(n => n.Age == 2).OrderBy(n => n.DisplayUnitCount))
                        {
                            <td>
                                <img src="/img/@card.ImageName" style="width: 64px; height: 64px" />
                                <p>@card.Name</p>
                            </td>

                        }
                    }
                </tr>

                <tr>
                    <td>IV</td>
                    @if (PickedCards != null)
                    {
                        @foreach (var card in PickedCards.Where(n => n.Age == 3).OrderBy(n => n.DisplayUnitCount))
                        {
                            <td>
                                <img src="/img/@card.ImageName" style="width: 64px; height: 64px" />
                                <p>@card.Name</p>
                            </td>

                        }
                    }
                </tr>
            </tbody>
        </table>
    </div>
</div>



@if (cards == null)
{
    @if (loadingDeck)
    {
        <p>Your deck is beeing prepared!</p>
    }
    else
    {
        <p>No Cards loaded</p>
    }

}
else
{
    <div class="row">
        <h1>Other possible cards</h1>
    </div>
    <div class="row">


        @foreach (var card in cards.OrderBy(n => n.Age).ThenBy(n => n.DisplayUnitCount))
        {

            <div class="card" style="width: 18rem;">
                <img class="card-img-top" style="margin: 20px; width: 64px; height: 64px" src="/img/@card.ImageName" alt="Card image cap">
                <div class="card-body">
                    <h5 class="card-title">@card.Name</h5>
                    <p class="card-text">Display Unit Count: @card.DisplayUnitCount</p>
                </div>
            </div>

        }
    </div>
}

@code
{

    List<Models.InfoItem> cards;

    List<Models.InfoItem> PickedCards;

    private bool loadingDeck = false;

    private string _selectedCityFile = "";
    private string selectedCityFile
    {
        get => _selectedCityFile;
        set
        {
            if (_selectedCityFile != value)
            {
                this.loadingDeck = true;
                this.InvokeAsync(StateHasChanged);
                _selectedCityFile = value;
                PickedCards = new List<Models.InfoItem>();
                Task.Run(async () =>
                {
                    cards = await mainService.GetCardsOfNation(selectedCityFile, "English");
                    MixDeck();
                });


            }
        }
    }

    private void MixDeck()
    {
        Console.WriteLine("Starte Mischen" + DateTime.Now.ToLongTimeString());
        Random rnd = new Random();
        int remainingSlots = 25;
        int cardsToPickOnFirst = rnd.Next(3, 5);
        remainingSlots -= cardsToPickOnFirst;
        int cardsToPickOnSecond = rnd.Next(8, 10);
        remainingSlots -= cardsToPickOnSecond;
        int cardsToPickOnThird = rnd.Next(8, 10);
        remainingSlots -= cardsToPickOnThird;
        int cardsToPickOnFourth = remainingSlots;

        while (PickedCards.Count < 25)
        {
            var pickedCard = cards.ElementAt(rnd.Next(0, cards.Count));


            if ((pickedCard.Age == 0 && PickedCards.Count(n => n.Age == 0) < cardsToPickOnFirst) ||
                (pickedCard.Age == 1 && PickedCards.Count(n => n.Age == 1) < cardsToPickOnSecond) ||
                (pickedCard.Age == 2 && PickedCards.Count(n => n.Age == 2) < cardsToPickOnThird) ||
                (pickedCard.Age == 3 && PickedCards.Count(n => n.Age == 3) < cardsToPickOnFourth)
                )
            {
                PickedCards.Add(pickedCard);
                cards.Remove(pickedCard);
            }

        }
        Console.WriteLine("Fertig gemischt" + DateTime.Now.ToLongTimeString());
        this.loadingDeck = false;
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}