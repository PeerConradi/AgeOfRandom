@inject Data.MainService mainService;
@page "/decks"

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5>Decks</h5>
            </div>

            <div class="card-body">
                <div class="form-group">
                    <label>Select Nation</label>
                    <select class="form-control" @bind="selectedNationId">
                        <option value="-1" disabled>Choose Nation</option>
                        @foreach (var nation in nations)
                        {
                            <option value="@nation.NationId">@nation.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label>Select Age</label>
                    <select class="form-control" @bind="selectedAge">
                        <option value="0">I: Exploration Age</option>
                        <option value="1">II: Commerce Age</option>
                        <option value="2">III: Fortress Age</option>
                        <option value="3">IV: Industrial Age</option>
                    </select>
                </div>

                <div class="row">
                    @if (cards != null)
                    {
                        @foreach(var card in cards)
                        {
                            <p><img src="/img/icons/@card.ImageName" /> @card.Name</p>
                        }
                    }
                </div>
            </div>
        </div>
        
    </div>
</div>

@code {
    private List<Models.Nation> nations { get; set; } = new List<Models.Nation>();

    private List<Models.Card> cards { get; set; }

    public int selectedAge { get; set; } = 0;

    private int _selectedNationId = -1;
    public int selectedNationId
    {
        get => _selectedNationId;
        set
        {
            if (value != _selectedNationId)
            {
                _selectedNationId = value;
                ReloadCardsForInput();
            }
        }
    }

    private void ReloadCardsForInput()
    {
        if (selectedNationId != -1)
        {
            cards = mainService.GetCardsForNationAndAge(selectedNationId, selectedAge);
            this.StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        nations = mainService.GetNations();
    }
}
